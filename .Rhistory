cacheSolve(a)
function
closeAllConnections()
rm(list=ls())
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix()
a$set(matrix(1:9,3,3))
cacheSolve(a)
a <- makeCacheMatrix()
a$set(matrix(1:4,2,2))
cacheSolve(a)
closeAllConnections()
rm(list=ls())
}
makeVector <- function(x = numeric())
{
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean)
m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector()
a$set(numeric(1:9))
cachemean(a)
a <- makeVector()
a$set(1:9)
cachemean(a)
source('C:/Users/Administrator/Desktop/R Course/ProgrammingAssignment2-master/ProgrammingAssignment2-master/cachematrix.R')
closeAllConnections()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL # sets the value of m to NULL (provides a default if cacheSolve has not yet been used)
y <- NULL # sets the value of y to NULL (provides a default if cacheSolve has not yet been used)
setmatrix <- function(y) { #set the value of the matrix
x <<- y ## caches the inputted matrix so that cacheSolve can check whether it has changed (note this is within the setmatrix function)
m <<- NULL # # sets the value of m (the matrix inverse if used cacheSolve) to NULL
}
# Parts removed
list(setmatrix = setmatrix, getmatrix = getmatrix, # creates a list to house the four functions
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
# Need to compare matrix to what was there before!
m <- x$getinverse() # if an inverse has already been calculated this gets it
if(!is.null(m)){ # check to see if cacheSolve has been run before
if(x$setmatrix() == x$getmatrix()) { # check that matrix hasn't changed, and if it hasn't, sends a text message and returns the cached matrix
#parts removed
return(m)
}
# otherwise
y <- x$getmatrix() # run the getmatrix function to get the value of the input matrix
x$setmatrix(y) # run the setmatrix function on the input matrix to cache it
m <- solve(y, ...) # compute the value of the inverse of the input matrix
x$setinverse(m) # run the setinverse function on the inverse to cache the inverse
m # return the inverse
}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
cacheSolve(mat2)
closeAllConnections()
rm(list=ls())
closeAllConnections()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
list(setmatrix = setmatrix, getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
m <- x$getinverse()
if(!is.null(m)){
if(x$setmatrix() == x$getmatrix()) {
return(m)
}
y <- x$getmatrix()
x$setmatrix(y)
m <- solve(y, ...)
x$setinverse(m)
m
}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
closeAllConnections()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
list(setmatrix = setmatrix, getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
m <- x$getinverse()
if(!is.null(m)){
if(x$setmatrix() == x$getmatrix()) {
return(m)
}
y <- x$getmatrix()
x$setmatrix(y)
m <- solve(y, ...)
x$setinverse(m)
m
}}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
closeAllConnections()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
list(setmatrix = setmatrix, getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
if(!is.null(m)){
if(x$setmatrix() == x$getmatrix()) {
return(m)
}
y <- x$getmatrix()
x$setmatrix(y)
m <- solve(y, ...)
x$setinverse(m)
m
}}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
closeAllConnections()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
list(setmatrix = setmatrix, getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
if(x$setmatrix() == x$getmatrix()) {
return(m)
}
y <- x$getmatrix()
x$setmatrix(y)
m <- solve(y, ...)
x$setinverse(m)
m
}}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
closeAllConnections()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
get<-function()x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(setmatrix = setmatrix, getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
if(x$setmatrix() == x$getmatrix()) {
return(m)
}
y <- x$getmatrix()
x$setmatrix(y)
m <- solve(y, ...)
x$setinverse(m)
m
}}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
closeAllConnections()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
get<-function()x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix = setmatrix,
getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
if(x$setmatrix() == x$getmatrix()) {
return(m)
}
y <- x$getmatrix()
x$setmatrix(y)
m <- solve(y, ...)
x$setinverse(m)
m
}}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
get<-function()x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(get=get,
setmatrix = setmatrix,
getmatrix = getmatrix,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function (x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
if(x$setmatrix() == x$getmatrix()) {
return(m)
}
y <- x$getmatrix()
x$setmatrix(y)
m <- solve(y, ...)
x$setinverse(m)
m
}}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
y <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
get<-function()x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(get=get,
setmatrix = setmatrix,
getmatrix = getmatrix,
)
}
cacheSolve <- function (x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
if(x$setmatrix() == x$getmatrix()) {
return(m)
}
y <- x$getmatrix()
x$setmatrix(y)
m <- solve(y, ...)
x$setinverse(m)
m
}}
mat <- matrix(data = c(4,2,7,6), nrow = 2, ncol = 2)
mat2 <- makeCacheMatrix(mat)
cacheSolve(mat2)
closeAllConnections()
rm(list=ls())
getmatrix<-function() m
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
y<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a <- makeCacheMatrix()
a$set(matrix(1:16,2,2))
cacheSolve(a)
source('C:/Users/Administrator/Desktop/R Course/ProgrammingAssignment2-master/ProgrammingAssignment2-master/cachematrix.R')
setmean <- function(mean)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
y<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
##############Second Type################################
makeVector <- function(x = numeric())
{
m <- NULL
y <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean)
m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeCacheMatrix()
a$set(matrix(1:16,2,2))
cacheSolve(a)
b <- makeVector()
b$set(1:9)
cachemean(b)
source('C:/Users/Administrator/Desktop/R Course/ProgrammingAssignment2-master/ProgrammingAssignment2-master/cachematrix.R')
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
y<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
## Write a short comment describing this function
cacheSolve <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
##############Second Type################################
makeVector <- function(x = numeric())
{
m <- NULL
y <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean)
m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeCacheMatrix()
a$set(matrix(1:16,2,2))
cacheSolve(a)
b <- makeVector()
b$set(1:9)
cachemean(b)
